// Import the necessary function from the Redux Toolkit library

import { createSlice } from "@reduxjs/toolkit";
import { updateCart } from "../utils/cardUtils.js"; // Importing a utility function to update the cart

// Check if there's data in the local storage and use it as initial state for the cart,
// or set an empty cart as the initial state
const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [],
     shippingAddress:{},
    paymentMethod:"paypal" };
  
/* 
   This block checks if there is any cart data stored in the local storage.
   If data exists, it parses and uses that data as the initial state of the cart.
   If no data is found, it initializes the cart with an empty array of cartItems.
*/

// Create a Redux slice named 'cartSlice'
const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState, // Initial state of the slice
  reducers: {
    addToCart: (state, action) => {
      // Extract the payload (item) from the dispatched action
      const item = action.payload;

      // Check if the item already exists in the cart
      const existItem = state.cartItems.find((x) => x._id === item._id);

      if (existItem) {
        // If the item exists, update its information in the cart
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        // If the item is not in the cart, add it to the cart
        state.cartItems = [...state.cartItems, item];
      }

      // Call a utility function to update the cart
      return updateCart(state);
    },
    removeFromCart: (state, action) => {
      // Remove the item with the matching _id from cartItems array
 state.cartItems = state.cartItems.filter((x) => x._id
  !== action.payload);
      
      // Call a utility function to update the cart
      return updateCart(state);
    },
    saveShippingAddress:(state, action)=>{
state.shippingAddress=action.payload
return updateCart(state);
    }
  },
});

/* 
   This block creates a Redux slice named 'cartSlice' which encapsulates the cart-related state and actions.
   The 'addToCart' reducer handles adding items to the cart, either by updating existing items or adding new ones.
   The 'removeFromCart' reducer handles removing items from the cart.
*/

// Extract the 'addToCart' and 'removeFromCart' actions from the cartSlice
export const { addToCart, removeFromCart,
   saveShippingAddress } = cartSlice.actions;

/* 
   This line extracts the 'addToCart' and 'removeFromCart' actions from the 'cartSlice' slice.
   These actions can be dispatched to trigger the state changes defined in the corresponding reducers.
*/

// Export the reducer function to be used in the Redux store
export default cartSlice.reducer;

/* 
   This line exports the reducer function generated by the 'cartSlice'.
   This reducer is used to manage the cart-related state in the Redux store.
*/
